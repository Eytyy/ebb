// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mood {
  id          String        @id @default(cuid())
  name        String
  Distraction Distraction[]
  TimeLog     TimeLog[]
}

model Area {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tag       String?
  TimeLog   TimeLog[]
}

model TimeLog {
  id            String        @id @default(cuid())
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  start         DateTime
  end           DateTime
  tag           String?
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  distractions  Distraction[]
  timeLogTypeId String
  TimeLogType   TimeLogType   @relation(fields: [timeLogTypeId], references: [id])
  mood          Mood          @relation(fields: [moodId], references: [id])
  moodId        String
  area          Area?         @relation(fields: [areaId], references: [id])
  areaId        String?
}

model TimeLogType {
  id      String    @id @default(cuid())
  name    String
  TimeLog TimeLog[]
}

model Distraction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String   @unique
  start     DateTime
  end       DateTime
  moodId    String
  mood      Mood     @relation(fields: [moodId], references: [id])
  TimeLog   TimeLog? @relation(fields: [timeLogId], references: [id])
  timeLogId String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  timeLogs      TimeLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
