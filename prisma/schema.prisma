// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mood {
  id           String        @id @default(cuid())
  name         String
  distractions Distraction[]
  timeLogs     TimeLog[]
  countlogs    Count[]
  notes        Note[]
}

model TimeLog {
  id           String        @id @default(cuid())
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  start        DateTime
  end          DateTime?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  timeLogType  String        @default("timer")
  mood         Mood?         @relation(fields: [moodId], references: [id])
  moodId       String?
  activity     Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId   String
  distractions Distraction[]
  notes        Note[]
}

model ActivityCategory {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String
  activities Activity[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([name, userId], name: "activityCategoryIdentifier")
}

model Activity {
  id         String           @id @default(cuid())
  updatedAt  DateTime         @updatedAt
  name       String
  timeLogs   TimeLog[]
  countlogs  Count[]
  category   ActivityCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  tracker    String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([name, userId], name: "activityIdentifier")
}

model Count {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  count      Int      @default(0)
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  mood       Mood     @relation(fields: [moodId], references: [id])
  moodId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Distraction {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  text          String   @unique
  start         DateTime
  end           DateTime
  moodId        String
  mood          Mood     @relation(fields: [moodId], references: [id])
  timeLog       TimeLog? @relation(fields: [timeLogId], references: [id], onDelete: Cascade)
  timeLogId     String?
  sessionTestId String?
}

model Note {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  text          String   @unique
  start         DateTime
  end           DateTime
  moodId        String
  mood          Mood     @relation(fields: [moodId], references: [id])
  timeLog       TimeLog? @relation(fields: [timeLogId], references: [id], onDelete: Cascade)
  timeLogId     String?
  sessionTestId String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  timeLogs           TimeLog[]
  countLogs          Count[]
  activities         Activity[]
  activityCategories ActivityCategory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
